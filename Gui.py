# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PIL import Image, ImageQt, ImageFilter
import os


class Ui_MainWindow(QtWidgets.QWidget):
    def setupUi(self, MainWindow):
        self.saved = False
        MainWindow.setObjectName("PhotoMakers")
        MainWindow.setWindowTitle("PhotoMakerFree")
        MainWindow.resize(1920, 1080)
        self.user = os.getlogin()
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(0, 0, 1920, 1080))
        self.graphicsView.setObjectName("graphicsView")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuFilter = QtWidgets.QMenu(self.menuEdit)
        self.menuFilter.setObjectName("menuFilter")
        self.menuDatei = QtWidgets.QMenu(self.menubar)
        self.menuDatei.setObjectName("menuDatei")
        MainWindow.setMenuBar(self.menubar)

        self.actionBild_ffnen = QtWidgets.QAction(MainWindow)
        self.actionBild_ffnen.setObjectName("actionBild_ffnen")

        self.actionSpeichern = QtWidgets.QAction(MainWindow)
        self.actionSpeichern.setObjectName("actionSpeichern")


        self.actionopen = QtWidgets.QAction(MainWindow)
        self.actionopen.setObjectName("actionopen")
        self.actionopen.triggered.connect(self.OpenPicture)

        self.actionsave = QtWidgets.QAction(MainWindow)
        self.actionsave.setObjectName("actionsave")
        self.actionsave.triggered.connect(self.SavePicture)

        self.actionKontrast = QtWidgets.QAction(MainWindow)
        self.actionKontrast.setObjectName("actionKontrast")
        self.actionKontrast.triggered.connect(self.Kontrast)


        self.actionUnsharpMask_Filter = QtWidgets.QAction(MainWindow)
        self.actionUnsharpMask_Filter.setObjectName("actionUnsharpMask_Filter")
        self.actionUnsharpMask_Filter.triggered.connect(self.UnsharpMask)

        self.actionBlur_Contour = QtWidgets.QAction(MainWindow)
        self.actionBlur_Contour.setObjectName("actionBlur_Contour")
        self.actionBlur_Contour.triggered.connect(self.Blur)

        self.actionDetail_Filter = QtWidgets.QAction(MainWindow)
        self.actionDetail_Filter.setObjectName("actionDetail_Filter")
        self.actionDetail_Filter.triggered.connect(self.Detail)

        self.actionEdge_Enhance_Filter = QtWidgets.QAction(MainWindow)
        self.actionEdge_Enhance_Filter.setObjectName("actionEdge_Enhance_Filter")
        self.actionEdge_Enhance_Filter.triggered.connect(self.Edge_Enhance)

        self.actionEmboss_Filter = QtWidgets.QAction(MainWindow)
        self.actionEmboss_Filter.setObjectName("actionEmboss_Filter")
        self.actionEmboss_Filter.triggered.connect(self.Emboss)


        self.actionFind_Edges_Filter = QtWidgets.QAction(MainWindow)
        self.actionFind_Edges_Filter.setObjectName("actionFind_Edges_Filter")
        self.actionFind_Edges_Filter.triggered.connect(self.Find_Edges)

        self.actionsmooth_filter = QtWidgets.QAction(MainWindow)
        self.actionsmooth_filter.setObjectName("actionsmooth_filter")
        self.actionsmooth_filter.triggered.connect(self.Smooth)

        self.actionSharpen_Filter = QtWidgets.QAction(MainWindow)
        self.actionSharpen_Filter.setObjectName("actionSharpen_Filter")
        self.actionSharpen_Filter.triggered.connect(self.sharpen)

        self.actionReload = QtWidgets.QAction(MainWindow)
        self.actionReload.setObjectName("actionReload")
        self.actionReload.triggered.connect(self.reload)

        self.menuFilter.addAction(self.actionKontrast)
        self.menuFilter.addAction(self.actionUnsharpMask_Filter)
        self.menuFilter.addAction(self.actionBlur_Contour)
        self.menuFilter.addAction(self.actionDetail_Filter)
        self.menuFilter.addAction(self.actionEdge_Enhance_Filter)
        self.menuFilter.addAction(self.actionEmboss_Filter)
        self.menuFilter.addAction(self.actionFind_Edges_Filter)
        self.menuFilter.addAction(self.actionsmooth_filter)
        self.menuFilter.addAction(self.actionSharpen_Filter)
        self.menuEdit.addAction(self.menuFilter.menuAction())
        self.menuEdit.addAction(self.actionReload)
        self.menuDatei.addAction(self.actionopen)
        self.menuDatei.addAction(self.actionsave)
        self.menubar.addAction(self.menuDatei.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuFilter.setTitle(_translate("MainWindow", "Filter"))
        self.menuDatei.setTitle(_translate("MainWindow", "Datei"))
        self.actionBild_ffnen.setText(_translate("MainWindow", "Bild öffnen"))
        self.actionSpeichern.setText(_translate("MainWindow", "Speichern"))
        self.actionopen.setText(_translate("MainWindow", "Open"))
        self.actionopen.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionsave.setText(_translate("MainWindow", "Save"))
        self.actionsave.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionKontrast.setText(_translate("MainWindow", "Kontrast"))
        self.actionUnsharpMask_Filter.setText(_translate("MainWindow", "UnsharpMask-Filter"))
        self.actionBlur_Contour.setText(_translate("MainWindow", "Blur-Contour"))
        self.actionDetail_Filter.setText(_translate("MainWindow", "Detail-Filter"))
        self.actionEdge_Enhance_Filter.setText(_translate("MainWindow", "Edge-Enhance-Filter"))
        self.actionEmboss_Filter.setText(_translate("MainWindow", "Emboss-Filter"))
        self.actionFind_Edges_Filter.setText(_translate("MainWindow", "Find-Edges-Filter"))
        self.actionsmooth_filter.setText(_translate("MainWindow", "Smooth-Filter"))
        self.actionSharpen_Filter.setText(_translate("MainWindow", "Sharpen-Filter"))
        self.actionReload.setText(_translate("MainWindow", "Zurücksetzen"))
        self.actionReload.setShortcut(_translate("MainWindow", "Ctrl+Z"))


    def OpenPicture(self):
        self.PictureName = QtWidgets.QFileDialog.getOpenFileName(self, 'Open file', 'C:\\Users\\{}\\Pictures'.format(self.usersss), "Image files (*.jpg *.gif)")
        self.Picture = Image.open(self.PictureName)
        self.qImage = ImageQt.ImageQt(self.Picture)
        self.scene = QtWidgets.QGraphicsScene()
        self.scene.addPixmap(QtGui.QPixmap().fromImage(self.qImage))
        self.graphicsView.setScene(self.scene)
        self.Back_upPicture = Image.open(self.PictureName)

    def Kontrast(self):
        self.Picture = self.Picture.point(lambda i: 0 if i < 125 else 255)
        self.qImage = ImageQt.ImageQt(self.Picture)
        self.scene = QtWidgets.QGraphicsScene()
        self.scene.addPixmap(QtGui.QPixmap().fromImage(self.qImage))
        self.graphicsView.setScene(self.scene)
        self.graphicsView.show()
    def SavePicture(self):
        self.Picture.save(self.PictureName)
        self.qImage = ImageQt.ImageQt(self.Picture)
        self.scene = QtWidgets.QGraphicsScene()
        self.scene.addPixmap(QtGui.QPixmap().fromImage(self.qImage))
        self.graphicsView.setScene(self.scene)
        self.graphicsView.show()
        self.saved = True

    def UnsharpMask(self):
        self.Picture = self.Picture.filter(ImageFilter.UnsharpMask(10))
        self.qImage = ImageQt.ImageQt(self.Picture.filter(ImageFilter.UnsharpMask(10)))
        self.scene = QtWidgets.QGraphicsScene()
        self.scene.addPixmap(QtGui.QPixmap().fromImage(self.qImage))
        self.graphicsView.setScene(self.scene)
        self.graphicsView.show()
    def Detail(self):
        self.Picture = self.Picture.filter(ImageFilter.DETAIL)
        self.qImage = ImageQt.ImageQt(self.Picture.filter(ImageFilter.DETAIL))
        self.scene = QtWidgets.QGraphicsScene()
        self.scene.addPixmap(QtGui.QPixmap().fromImage(self.qImage))
        self.graphicsView.setScene(self.scene)
        self.graphicsView.show()

    def Blur(self):
        self.Picture = self.Picture.filter(ImageFilter.BLUR)
        self.qImage = ImageQt.ImageQt(self.Picture.filter(ImageFilter.BLUR))
        self.scene = QtWidgets.QGraphicsScene()
        self.scene.addPixmap(QtGui.QPixmap().fromImage(self.qImage))
        self.graphicsView.setScene(self.scene)
        self.graphicsView.show()

    def Edge_Enhance(self):
        self.Picture = self.Picture.filter(ImageFilter.EDGE_ENHANCE)
        self.qImage = ImageQt.ImageQt(self.Picture.filter(ImageFilter.EDGE_ENHANCE))
        self.scene = QtWidgets.QGraphicsScene()
        self.scene.addPixmap(QtGui.QPixmap().fromImage(self.qImage))
        self.graphicsView.setScene(self.scene)
        self.graphicsView.show()

    def Emboss(self):
        self.Picture = self.Picture.filter(ImageFilter.EMBOSS)
        self.qImage = ImageQt.ImageQt(self.Picture.filter(ImageFilter.EMBOSS))
        self.scene = QtWidgets.QGraphicsScene()
        self.scene.addPixmap(QtGui.QPixmap().fromImage(self.qImage))
        self.graphicsView.setScene(self.scene)
        self.graphicsView.show()

    def Find_Edges(self):
        self.Picture = self.Picture.filter(ImageFilter.FIND_EDGES)
        self.qImage = ImageQt.ImageQt(self.Picture.filter(ImageFilter.FIND_EDGES))
        self.scene = QtWidgets.QGraphicsScene()
        self.scene.addPixmap(QtGui.QPixmap().fromImage(self.qImage))
        self.graphicsView.setScene(self.scene)
        self.graphicsView.show()

    def Smooth(self):
        self.Picture = self.Picture.filter(ImageFilter.SMOOTH)
        self.qImage = ImageQt.ImageQt(self.Picture.filter(ImageFilter.SMOOTH))
        self.scene = QtWidgets.QGraphicsScene()
        self.scene.addPixmap(QtGui.QPixmap().fromImage(self.qImage))
        self.graphicsView.setScene(self.scene)
        self.graphicsView.show()

    def sharpen(self):
        self.Picture = self.Picture.filter(ImageFilter.SHARPEN)
        self.qImage = ImageQt.ImageQt(self.Picture.filter(ImageFilter.SHARPEN))
        self.scene = QtWidgets.QGraphicsScene()
        self.scene.addPixmap(QtGui.QPixmap().fromImage(self.qImage))
        self.graphicsView.setScene(self.scene)
        self.graphicsView.show()

    def reload(self):
        self.Picture = self.Back_upPicture
        self.qImage = ImageQt.ImageQt(self.Back_upPicture)
        self.scene = QtWidgets.QGraphicsScene()
        self.scene.addPixmap(QtGui.QPixmap().fromImage(self.qImage))
        self.graphicsView.setScene(self.scene)
        self.graphicsView.show()







if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())